# -*- coding: utf-8 -*-

# --- B∆Ø·ªöC 1: NH·∫¨P C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT ---
import os
import smtplib
import feedparser
import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta, timezone
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from dotenv import load_dotenv
from urllib.parse import urlparse
import time
import calendar # Th√™m th∆∞ vi·ªán calendar ƒë·ªÉ x·ª≠ l√Ω m√∫i gi·ªù UTC ch√≠nh x√°c nh·∫•t

# --- B∆Ø·ªöC 2: N·∫†P C·∫§U H√åNH V√Ä C√ÅC TH√îNG TIN B√ç M·∫¨T ---
print("ƒêang n·∫°p c√°c th√¥ng tin c·∫•u h√¨nh...")
load_dotenv()

# C·∫•u h√¨nh Gemini AI
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# C·∫•u h√¨nh Email
SENDER_EMAIL = os.getenv("SENDER_EMAIL")
SENDER_PASSWORD = os.getenv("SENDER_PASSWORD")
RECIPIENT_EMAIL = os.getenv("RECIPIENT_EMAIL")
# L·∫•y danh s√°ch email Cc t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
CC_RECIPIENT_EMAILS = os.getenv("CC_RECIPIENT_EMAILS", "")

<<<<<<< HEAD

=======
>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
# Danh s√°ch c√°c "qu·∫ßy b√°o" (RSS feed)
RSS_FEEDS = [
    {'name': 'The Hacker News', 'url': 'https://feeds.feedburner.com/TheHackersNews'},
    {'name': 'Bleeping Computer', 'url': 'https://www.bleepingcomputer.com/feed/'},
    {'name': 'Cyberpress', 'url': 'https://cyberpress.org/feed/'},
    {'name': 'Security Online', 'url': 'https://securityonline.info/feed/'},
    {'name': 'SecurityWeek', 'url': 'http://feeds.feedburner.com/Securityweek'},
    {'name': 'Dark Reading', 'url': 'https://www.darkreading.com/rss.xml'}
]


# --- B∆Ø·ªöC 3: X√ÇY D·ª∞NG C√ÅC "C√îNG NH√ÇN" CHUY√äN BI·ªÜT ---

def get_article_text(url):
<<<<<<< HEAD
    """Ch·ªâ c·ªë g·∫Øng l·∫•y n·ªôi dung tr·ª±c ti·∫øp b·∫±ng requests."""
=======
    """
    H√†m n√†y ch·ªâ c·ªë g·∫Øng l·∫•y n·ªôi dung tr·ª±c ti·∫øp b·∫±ng requests.
    N·∫øu th·∫•t b·∫°i v√¨ b·∫•t k·ª≥ l√Ω do g√¨, n√≥ s·∫Ω tr·∫£ v·ªÅ None v√† b·ªè qua.
    """
>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
    print(f"  ...Th·ª≠ l·∫•y tr·ª±c ti·∫øp t·ª´: {url[:70]}...")
    SITE_SELECTORS = {
        'thehackernews.com': 'div.articlebody',
        'bleepingcomputer.com': 'div.article_section',
        'cyberpress.org': 'div.tdb_single_content',
        'securityonline.info': 'div.entry-content',
        'securityweek.com': 'div.zox-post-body',
        'darkreading.com': 'div.ArticleBase-BodyContent',
    }
    domain = urlparse(url).netloc
    selector = next((s for k, s in SITE_SELECTORS.items() if k in domain), 'article')
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
        response = requests.get(url, headers=headers, timeout=20)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        main_content = soup.select_one(selector)
        if main_content:
            paragraphs = main_content.find_all('p')
            full_text = ' '.join([p.get_text() for p in paragraphs])
            if len(full_text) > 150:
                print("    -> L·∫•y tr·ª±c ti·∫øp th√†nh c√¥ng!")
                return full_text
<<<<<<< HEAD
=======
        
        # N·∫øu kh√¥ng c√≥ main_content ho·∫∑c text qu√° ng·∫Øn, n√≥ s·∫Ω ƒëi xu·ªëng v√† tr·∫£ v·ªÅ None
>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
        print(f"    -> L·∫•y tr·ª±c ti·∫øp th·∫•t b·∫°i (kh√¥ng t√¨m th·∫•y selector '{selector}' ho·∫∑c n·ªôi dung qu√° ng·∫Øn). B·ªè qua.")
        return None
    except Exception as e:
        print(f"    -> L·ªói khi l·∫•y tr·ª±c ti·∫øp: {e}. B·ªè qua b√†i vi·∫øt n√†y.")
        return None

def summarize_with_gemini(text_content, article_title):
<<<<<<< HEAD
    """T√≥m t·∫Øt v√† ƒë·ªãnh d·∫°ng n·ªôi dung b·∫±ng AI."""
    print("  ...G·ª≠i cho AI t√≥m t·∫Øt v√† ƒë·ªãnh d·∫°ng...")
    
    # S·ª≠ d·ª•ng model flash ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô v√† chi ph√≠
    model = genai.GenerativeModel('gemini-1.5-flash')
=======
    """
    T√≥m t·∫Øt v√† ƒë·ªãnh d·∫°ng n·ªôi dung b·∫±ng AI.
    """
    print("  ...G·ª≠i cho AI t√≥m t·∫Øt v√† ƒë·ªãnh d·∫°ng...")
    
    # S·ª≠ d·ª•ng model flash ƒë·ªÉ t·ªëi ∆∞u t·ªëc ƒë·ªô v√† chi ph√≠
    model = genai.GenerativeModel('gemini-2.5-flash')
>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d

    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch an ninh m·∫°ng. H√£y ph√¢n t√≠ch n·ªôi dung b√†i b√°o c√≥ ti√™u ƒë·ªÅ "{article_title}" v√† t√≥m t·∫Øt l·∫°i theo ƒë·ªãnh d·∫°ng HTML nghi√™m ng·∫∑t d∆∞·ªõi ƒë√¢y.
    Ch·ªâ tr·∫£ v·ªÅ m√£ HTML c·ªßa ph·∫ßn div, kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n n√†o kh√°c hay gi·∫£i th√≠ch g√¨. L∆∞u √Ω t·∫•t c·∫£ b√†i vi·∫øt ph·∫£i ƒë∆∞·ª£c d·ªãch ra ti·∫øng Vi·ªát ho√†n to√†n.

    N·ªòI DUNG B√ÄI B√ÅO: {text_content[:8000]}

    M·∫™U ƒê·ªäNH D·∫†NG HTML (s·ª≠ d·ª•ng m√†u ƒë·ªè #d9534f cho m·ª©c ƒë·ªô nghi√™m tr·ªçng):
    <div style="border-left: 4px solid #d9534f; padding-left: 15px; margin-bottom: 25px; background-color: #f9f9f9; padding: 5px 15px 15px 15px;">
        <p><strong>üìù M√¥ t·∫£:</strong> [M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ l·ªó h·ªïng, s·∫£n ph·∫©m b·ªã ·∫£nh h∆∞·ªüng v√† m√£ CVE. N·∫øu kh√¥ng ph·∫£i tin v·ªÅ l·ªó h·ªïng th√¨ m√¥ t·∫£ s·ª± ki·ªán ch√≠nh.]</p>
        <p><strong>üí• M·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng:</strong> <strong style="color: #d9534f;">[ƒê√°nh gi√° m·ª©c ƒë·ªô, v√≠ d·ª•: Nghi√™m tr·ªçng/Cao/Trung b√¨nh/th·∫•p]</strong> [H·∫≠u qu·∫£ ch√≠nh n·∫øu b·ªã khai th√°c ho·∫∑c t·∫ßm quan tr·ªçng c·ªßa tin t·ª©c.].</p>
        <p><strong>‚úÖ H√†nh ƒë·ªông ƒê·ªÅ xu·∫•t:</strong></p>
        <ul style="margin-top: -10px;"><li>[H√†nh ƒë·ªông 1, v√≠ d·ª•: C·∫≠p nh·∫≠t b·∫£n v√° X.]</li><li>[H√†nh ƒë·ªông 2, n·∫øu c√≥, v√≠ d·ª•: R√† so√°t h·ªá th·ªëng Y.]</li></ul>
    </div>"""
    try:
        response = model.generate_content(prompt)
        raw_text = response.text
        cleaned_text = raw_text.replace("```html", "").replace("```", "").strip()
        return cleaned_text
    except Exception as e:
        print(f"  -> L·ªói khi t√≥m t·∫Øt b·∫±ng Gemini: {e}")
        return f"<p>L·ªói khi t√≥m t·∫Øt b√†i vi·∫øt '{article_title}'. L√Ω do: {e}</p>"

def send_email(subject, html_body):
    """
<<<<<<< HEAD
    "Ng∆∞·ªùi ƒë∆∞a th∆∞" phi√™n b·∫£n Microsoft, s·ª≠ d·ª•ng m√°y ch·ªß SMTP c·ªßa Office 365.
=======
    G·ª≠i email t·ªïng h·ª£p ƒëi.
>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
    """
    print("\nChu·∫©n b·ªã g·ª≠i email t·ªïng h·ª£p...")

    # L·∫•y danh s√°ch email Cc t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (n·∫øu c√≥)
    cc_emails_str = os.getenv("CC_RECIPIENT_EMAILS", "")
    cc_list = [email.strip() for email in cc_emails_str.split(',') if email.strip()]

    msg = MIMEMultipart('alternative')
    msg['From'] = SENDER_EMAIL
    msg['Subject'] = subject
    msg['To'] = RECIPIENT_EMAIL
    if cc_list:
        msg['Cc'] = ", ".join(cc_list)

    msg.attach(MIMEText(html_body, 'html', 'utf-8'))
    all_recipients = [RECIPIENT_EMAIL] + cc_list
    
    try:
        # THAY ƒê·ªîI CH√çNH N·∫∞M ·ªû ƒê√ÇY:
        # S·ª≠ d·ª•ng m√°y ch·ªß v√† c·ªïng c·ªßa Microsoft/Outlook
        server = smtplib.SMTP('smtp.office365.com', 587)
        server.starttls() # B·∫≠t ch·∫ø ƒë·ªô b·∫£o m·∫≠t
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        
        server.sendmail(SENDER_EMAIL, all_recipients, msg.as_string())
        
        server.quit()
        print(f"‚úÖ Email t·ªïng h·ª£p ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn: {', '.join(all_recipients)}")
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i email: {e}")

<<<<<<< HEAD
=======

>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
# --- B∆Ø·ªöC 4: "QU·∫¢N ƒê·ªêC" ƒêI·ªÄU PH·ªêI C√îNG VI·ªÜC ---
def main():
    """H√†m ch√≠nh, ƒëi·ªÅu ph·ªëi to√†n b·ªô quy tr√¨nh."""
    print("\nüöÄ B·∫Øt ƒë·∫ßu ca l√†m vi·ªác! L·∫•y v√† t√≥m t·∫Øt tin t·ª©c...")
    TIMESTAMP_FILE = "last_run_timestamp.txt"
    current_run_timestamp = datetime.now(timezone.utc)
    last_run_timestamp = datetime.fromtimestamp(0, tz=timezone.utc)
<<<<<<< HEAD
=======

>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
    try:
        with open(TIMESTAMP_FILE, "r") as f:
            timestamp_from_file = float(f.read().strip())
            last_run_timestamp = datetime.fromtimestamp(timestamp_from_file, tz=timezone.utc)
        print(f"ƒê√£ t√¨m th·∫•y l·∫ßn ch·∫°y tr∆∞·ªõc, s·∫Ω ch·ªâ l·∫•y tin t·ª©c sau: {last_run_timestamp.strftime('%Y-%m-%d %H:%M:%S %Z')}")
    except FileNotFoundError:
        print("Kh√¥ng t√¨m th·∫•y file timestamp, ƒë√¢y l√† l·∫ßn ch·∫°y ƒë·∫ßu ti√™n. S·∫Ω l·∫•y tin trong 24 gi·ªù qua.")
        last_run_timestamp = datetime.now(timezone.utc) - timedelta(days=1)
    except Exception as e:
        print(f"L·ªói khi ƒë·ªçc file timestamp, s·∫Ω l·∫•y tin trong 24 gi·ªù qua. L·ªói: {e}")
        last_run_timestamp = datetime.now(timezone.utc) - timedelta(days=1)

    summaries_html_list = []
    for feed_info in RSS_FEEDS:
        print(f"\nüîç Gh√© thƒÉm qu·∫ßy b√°o: {feed_info['name']}")
        try:
            feed = feedparser.parse(feed_info['url'])
            for entry in feed.entries:
<<<<<<< HEAD
                # C·∫¢I TI·∫æN: D√πng calendar.timegm ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n x·ª≠ l√Ω th·ªùi gian theo UTC
                published_time_ts = calendar.timegm(entry.published_parsed)
                published_time = datetime.fromtimestamp(published_time_ts, tz=timezone.utc)
                
=======
                published_time = datetime.fromtimestamp(time.mktime(entry.published_parsed), tz=timezone.utc)

>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
                if published_time > last_run_timestamp:
                    print(f"  üì∞ Ph√°t hi·ªán tin m·ªõi: {entry.title}")
                    article_text = get_article_text(entry.link)
                    if article_text:
                        summary_html = summarize_with_gemini(article_text, entry.title)
                        article_block_html = f"""
                        <h2 style="font-size: 20px; margin-bottom: 5px; color: #003366;"><a href="{entry.link}" style="color: #0056b3; text-decoration: none;" target="_blank">{entry.title}</a></h2>
                        <p style="font-size: 14px; color: #555; margin-top: -15px; font-style: italic;">Ngu·ªìn: {feed_info['name']}</p>
                        {summary_html}"""
                        summaries_html_list.append(article_block_html)
                        print("    -> T·∫°m ngh·ªâ 15 gi√¢y ƒë·ªÉ ch·ªù l∆∞·ª£t API ti·∫øp theo...")
<<<<<<< HEAD
                        time.sleep(15)
=======
                        time.sleep(15) 
>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
        except Exception as e:
            print(f"  -> L·ªói khi x·ª≠ l√Ω RSS feed c·ªßa {feed_info['name']}: {e}")

    if summaries_html_list:
<<<<<<< HEAD
        # === S·ª¨A L·ªñI M√öI GI·ªú ===
=======
        # Chuy·ªÉn ƒë·ªïi th·ªùi gian sang m√∫i gi·ªù Vi·ªát Nam (GMT+7)
>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
        utc_now = datetime.now(timezone.utc)
        gmt7 = timezone(timedelta(hours=7))
        vn_time = utc_now.astimezone(gmt7)
        run_time_str = vn_time.strftime("%H:%M ng√†y %d/%m/%Y")
<<<<<<< HEAD
=======
        
>>>>>>> e491c37fe0dba49406cd8c6bea8dafb53fa5a55d
        subject = f"B·∫£n tin An ninh m·∫°ng c·∫≠p nh·∫≠t l√∫c {run_time_str}"
        
        final_body = "<hr style='border: 0; border-top: 1px solid #eee;'>".join(summaries_html_list)
        full_email_body = f"""
        <html><head></head>
        <body style="font-family: Arial, sans-serif; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px;">
            <h1 style="color: #003366; text-align: center;">B·∫£n tin An ninh m·∫°ng</h1>
            <p style="text-align: center;">C√°c tin t·ª©c m·ªõi nh·∫•t k·ªÉ t·ª´ l·∫ßn c·∫≠p nh·∫≠t tr∆∞·ªõc, ƒë∆∞·ª£c t√≥m t·∫Øt b·ªüi Tr·ª£ l√Ω AI.</p>
            {final_body}
            <p style="text-align: center; margin-top: 30px; font-size: 12px; color: #999;">Email ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi h·ªá th·ªëng t√≥m t·∫Øt tin t·ª©c.</p>
        </body></html>"""
        send_email(subject, full_email_body)
        
        try:
            with open(TIMESTAMP_FILE, "w") as f:
                f.write(str(current_run_timestamp.timestamp()))
            print(f"\n‚úÖ ƒê√£ c·∫≠p nh·∫≠t timestamp cho l·∫ßn ch·∫°y ti·∫øp theo: {current_run_timestamp.strftime('%Y-%m-%d %H:%M:%S %Z')}")
        except Exception as e:
            print(f"‚ùå L·ªói khi ghi file timestamp: {e}")
    else:
        print("\nKh√¥ng c√≥ tin t·ª©c m·ªõi n√†o k·ªÉ t·ª´ l·∫ßn ch·∫°y tr∆∞·ªõc. K·∫øt th√∫c ca l√†m vi·ªác.")

# --- B∆Ø·ªöC 5: KH·ªûI ƒê·ªòNG C·ªñ M√ÅY ---
if __name__ == "__main__":
    main()
